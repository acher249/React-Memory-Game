{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Wrapper/Wrapper.js","components/Jumbotron/Jumbotron.js","components/Nav/Nav.js","components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","NewFriendClick","id","alt","name","src","image","Wrapper","children","Jumbotron","score","Nav","href","Col","_ref","size","split","map","join","Container","fluid","concat","Row","App","state","friends","clickedFriendsArray","arr","Object","toConsumableArray","_this","length","push","setState","indexOf","console","log","alert","window","location","reload","_this2","this","components_Nav_Nav","components_Jumbotron_Jumbotron","Container_Container","Row_Row","Col_Col","components_Wrapper_Wrapper","friend","components_FriendCard_FriendCard","removeFriend","key","occupation","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.09445a03.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n  <div className=\"card\" onClick={() => props.NewFriendClick(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n    <div className=\"content\">\n      <ul>\n        <li>\n          <strong>Name:</strong> {props.name}\n        </li>\n      </ul>\n    </div>\n    {/* \n\n    TO DO:\n    - steal this onclick method below.. but put the onlick over the entire card.\n    - need the new logic for the memory game. figure out the best place to put it.\n    - get an array of all the friends, out of the json file.\n    - when the game starts create a new array with the friends that you have clicked with a counter for how many\n    you have gotten in a row. then if the user clicks the same character that they have aleady clicked, \n    ie. is inside the array, then they lose. give them a prompt top start over.\n    \n    */}\n\n    {/* <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n      ùòÖ\n    </span> */}\n  </div>\n);\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = props => (\n  <div className=\"jumbotron text-center\">\n    <h1>Score: {props.score}</h1>\n    <h6>Click on the characters but don't forget who you have clicked on! Try to get them all!</h6>\n  </div>\n);\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = () => (\n  <nav className=\"navbar navbar-dark bg-dark\">\n    <a className=\"navbar-brand\" href=\"/\">\n      React Memory Game\n    </a>\n  </nav>\n);\n\nexport default Nav;\n","import React from \"react\";\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport const Col = ({ size, children }) => (\n  <div className={size.split(\" \").map(size => \"col-\" + size).join(\" \")}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport const Container = ({ fluid, children }) => (\n  <div className={`container${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport const Row = ({ fluid, children }) => (\n  <div className={`row${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport { Container, Row, Col } from \"./components/Grid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    clickedFriendsArray: [],\n    score: 0\n  };\n\n  //passing in the id of the clicked element\n  NewFriendClick = id => {\n\n    // add friend id into array, check to make sure the clicked friend is not already in the array.\n\n    // copy - \"spread operator\"\n    let arr = [...this.state.clickedFriendsArray];\n\n    if(this.state.clickedFriendsArray.length == 0){\n      arr.push(id);\n      this.setState({ clickedFriendsArray: arr });\n      this.setState({ score: this.state.score + 1 });\n\n      // console.log(this.state.clickedFriendsArray);\n    }\n    else\n    {\n      // if the id is not in the array = -1\n      if(arr.indexOf(id) === -1){\n        console.log(\"id not in array..need to push into array.\");\n        arr.push(id);\n        this.setState({ clickedFriendsArray: arr });\n        this.setState({ score: this.state.score + 1 });\n      }else{\n        console.log(\"id already exists in array.. YOU LOSE\");\n        this.setState({ score: 0});\n        alert(\"YOU LOSE\");\n        // after you lose reset the game\n        window.location.reload(true);\n      }\n    }\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        <Nav />\n        <Jumbotron \n        score={this.state.score}\n        />\n        <Container>\n          <Row>\n            <Col size=\"lg-2\"></Col>\n            <Col size=\"xs-2\">\n            <Wrapper>\n              {this.state.friends.map(friend => (\n                <FriendCard\n                // need to send the NewFriendClick function down to the component as a prop\n                  NewFriendClick={this.NewFriendClick}\n                  removeFriend={this.removeFriend}\n                  id={friend.id}\n                  key={friend.id}\n                  name={friend.name}\n                  image={friend.image}\n                  occupation={friend.occupation}\n                  location={friend.location}\n                />\n              ))}\n            </Wrapper>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}