{"ast":null,"code":"import _toConsumableArray from \"/Users/adam/Documents/GitHub/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/adam/Documents/GitHub/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adam/Documents/GitHub/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adam/Documents/GitHub/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adam/Documents/GitHub/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adam/Documents/GitHub/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adam/Documents/GitHub/React-Memory-Game/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport { Container, Row, Col } from \"./components/Grid\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      clickedFriendsArray: []\n    };\n\n    _this.NewFriendClick = function (id) {\n      // add friend id into array, check to make sure the clicked friend is not already in the array.\n      // how to make this array global? put it as a variable in the state\n      // console.log(\"clicked\");\n      // this.state.clickedFriendsArray.filter(el => \n      // copy - \"spread operator\"\n      var arr = _toConsumableArray(_this.state.clickedFriendsArray);\n\n      if (_this.state.clickedFriendsArray.length == 0) {\n        arr.push(id);\n\n        _this.setState({\n          clickedFriendsArray: arr\n        });\n\n        console.log(_this.state.clickedFriendsArray);\n      } else {\n        if (arr.indexOf(id) === -1) {\n          console.log(\"\");\n        } // this.state.clickedFriendsArray.filter(el => \n        //   );\n        // need to make sure that we only push it once and then stop the for loop\n        // let pushed = false;\n        // for (let i = 0; i < this.state.clickedFriendsArray.length && !pushed; i++) {\n        //   console.log(\"compare both IDs: \");\n        //   console.log(this.state.clickedFriendsArray[i], id);\n        //   // this.state.clickedFriendsArray[i] is always 1.... why?\n        //   if (this.state.clickedFriendsArray[i] != id){\n        //     console.log(\"we are in the if\", id);\n        //     this.state.clickedFriendsArray.push(id);\n        //     pushed = true;\n        //   }\n        //   else\n        //   {\n        //     console.log(\"you lose\");\n        //     prompt(\"you lose\");\n        //     // you lose\n        //   }\n        // }\n\n      } // Set this.state.friends equal to the new friends array\n      // this.setState(\n      //   { friends, \n      //   clickedFriendsArray: this.state.clickedFriendsArray \n      // });\n\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // removeFriend = id => {\n    //   // Filter this.state.friends for friends with an id not equal to the id being removed\n    //   const friends = this.state.friends.filter(friend => friend.id !== id);\n    //   // Set this.state.friends equal to the new friends array\n    //   this.setState({ friends });\n    // };\n    // Map over this.state.friends and render a FriendCard component for each friend object\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Col, {\n        size: \"lg-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Col, {\n        size: \"xs-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.state.friends.map(function (friend) {\n        return React.createElement(FriendCard // need to send the NewFriendClick function down to the component as a prop\n        , {\n          NewFriendClick: _this2.NewFriendClick,\n          removeFriend: _this2.removeFriend,\n          id: friend.id,\n          key: friend.id,\n          name: friend.name,\n          image: friend.image,\n          occupation: friend.occupation,\n          location: friend.location,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        });\n      }))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adam/Documents/GitHub/React-Memory-Game/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Jumbotron","Nav","Title","friends","Container","Row","Col","App","state","clickedFriendsArray","NewFriendClick","id","arr","length","push","setState","console","log","indexOf","map","friend","removeFriend","name","image","occupation","location"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport { Container, Row, Col } from \"./components/Grid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    clickedFriendsArray: [],\n  };\n\n  //passing in the id of the clicked element\n  NewFriendClick = id => {\n\n    // add friend id into array, check to make sure the clicked friend is not already in the array.\n    // how to make this array global? put it as a variable in the state\n    // console.log(\"clicked\");\n\n    // this.state.clickedFriendsArray.filter(el => \n    // copy - \"spread operator\"\n    let arr = [...this.state.clickedFriendsArray];\n\n    if(this.state.clickedFriendsArray.length == 0){\n      arr.push(id);\n      this.setState({ clickedFriendsArray: arr });\n      console.log(this.state.clickedFriendsArray);\n    }\n    else\n    {\n      if(arr.indexOf(id) === -1){\n        console.log(\"\");\n      }\n      // this.state.clickedFriendsArray.filter(el => \n        \n\n    //   );\n\n      // need to make sure that we only push it once and then stop the for loop\n      // let pushed = false;\n\n      // for (let i = 0; i < this.state.clickedFriendsArray.length && !pushed; i++) {\n\n      //   console.log(\"compare both IDs: \");\n      //   console.log(this.state.clickedFriendsArray[i], id);\n\n      //   // this.state.clickedFriendsArray[i] is always 1.... why?\n      //   if (this.state.clickedFriendsArray[i] != id){\n  \n      //     console.log(\"we are in the if\", id);\n  \n      //     this.state.clickedFriendsArray.push(id);\n      //     pushed = true;\n      //   }\n      //   else\n      //   {\n      //     console.log(\"you lose\");\n      //     prompt(\"you lose\");\n      //     // you lose\n      //   }\n  \n      // }\n    }\n\n\n    // Set this.state.friends equal to the new friends array\n    // this.setState(\n    //   { friends, \n    //   clickedFriendsArray: this.state.clickedFriendsArray \n    // });\n  };\n\n  // removeFriend = id => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        <Nav />\n        <Jumbotron />\n        <Container>\n          <Row>\n            <Col size=\"lg-2\"></Col>\n            <Col size=\"xs-2\">\n            <Wrapper>\n              {this.state.friends.map(friend => (\n                <FriendCard\n                // need to send the NewFriendClick function down to the component as a prop\n                  NewFriendClick={this.NewFriendClick}\n                  removeFriend={this.removeFriend}\n                  id={friend.id}\n                  key={friend.id}\n                  name={friend.name}\n                  image={friend.image}\n                  occupation={friend.occupation}\n                  location={friend.location}\n                />\n              ))}\n            </Wrapper>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}