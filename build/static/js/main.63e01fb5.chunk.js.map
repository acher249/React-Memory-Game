{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Wrapper/Wrapper.js","components/Jumbotron/Jumbotron.js","components/Nav/Nav.js","components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","name","src","image","Wrapper","children","Jumbotron","Nav","href","Col","_ref","size","split","map","join","Container","fluid","concat","Row","App","state","friends","_this2","this","components_Nav_Nav","components_Jumbotron_Jumbotron","Container_Container","Row_Row","Col_Col","components_Wrapper_Wrapper","friend","components_FriendCard_FriendCard","removeFriend","id","key","occupation","location","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"4nFAiCeA,SA9BI,SAAAC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,SAEnCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBADF,IAC0BH,EAAMM,WCNzBG,SAFC,SAAAT,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMU,YCK1CC,SALG,kBAChBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BCOFQ,SARH,kBACVX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeS,KAAK,KAAjC,uCCDSC,EAAM,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMN,EAATK,EAASL,SAAT,OACjBT,EAAAC,EAAAC,cAAA,OAAKC,UAAWY,EAAKC,MAAM,KAAKC,IAAI,SAAAF,GAAI,MAAI,OAASA,IAAMG,KAAK,MAC7DT,ICHQU,EAAY,SAAAL,GAAA,IAAGM,EAAHN,EAAGM,MAAOX,EAAVK,EAAUL,SAAV,OACvBT,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAkB,OAAcD,EAAQ,SAAW,KAC5CX,ICFQa,EAAM,SAAAR,GAAA,IAAGM,EAAHN,EAAGM,MAAOX,EAAVK,EAAUL,SAAV,OACjBT,EAAAC,EAAAC,cAAA,OAAKC,UAAS,MAAAkB,OAAQD,EAAQ,SAAW,KACtCX,IC8EUc,oNAvEbC,MAAQ,CACNC,mFAwCO,IAAAC,EAAAC,KACP,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAKjB,KAAK,SACVf,EAAAC,EAAAC,cAAC8B,EAAD,CAAKjB,KAAK,QACVf,EAAAC,EAAAC,cAAC+B,EAAD,KACGN,KAAKH,MAAMC,QAAQR,IAAI,SAAAiB,GAAM,OAC5BlC,EAAAC,EAAAC,cAACiC,EAAD,CACEC,aAAcV,EAAKU,aACnBC,GAAIH,EAAOG,GACXC,IAAKJ,EAAOG,GACZhC,KAAM6B,EAAO7B,KACbE,MAAO2B,EAAO3B,MACdgC,WAAYL,EAAOK,WACnBC,SAAUN,EAAOM,yBA7DjBC,oBCLlBC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.63e01fb5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n    <div className=\"content\">\n      <ul>\n        <li>\n          <strong>Name:</strong> {props.name}\n        </li>\n      </ul>\n    </div>\n    {/* \n\n    TO DO:\n    - steal this onclick method below.. but put the onlick over the entire card.\n    - need the new logic for the memory game. figure out the best place to put it.\n    - get an array of all the friends, out of the json file.\n    - when the game starts create a new array with the friends that you have clicked with a counter for how many\n    you have gotten in a row. then if the user clicks the same character that they have aleady clicked, \n    ie. is inside the array, then they lose. give them a prompt top start over.\n    \n    */}\n\n    {/* <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n      ùòÖ\n    </span> */}\n  </div>\n);\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = () => (\n  <div className=\"jumbotron text-center\">\n  </div>\n);\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = () => (\n  <nav className=\"navbar navbar-dark bg-dark\">\n    <a className=\"navbar-brand\" href=\"/\">\n      React Memory Game\n    </a>\n  </nav>\n);\n\nexport default Nav;\n","import React from \"react\";\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport const Col = ({ size, children }) => (\n  <div className={size.split(\" \").map(size => \"col-\" + size).join(\" \")}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport const Container = ({ fluid, children }) => (\n  <div className={`container${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport const Row = ({ fluid, children }) => (\n  <div className={`row${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport { Container, Row, Col } from \"./components/Grid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n  //passing in the id of the clicked element\n  // NewFriendClick = id => {\n\n  //   // add friend id into array, check to make sure the clicked friend is not already in the array.\n  //   // how to make this array global?\n  //   let clickedFriendsArray = [];\n\n  //   for (i = 0; i < clickedFriendsArray.length; i++) {\n  //     if (clickedFriendsArray[i] != id){\n\n  //       clickedFriendsArray.push(id);\n\n  //     }\n  //     else\n  //     {\n\n  //     }\n\n  //   }\n\n  //   const friends = this.state.friends.filter(friend => friend.id !== id);\n\n\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n\n  // removeFriend = id => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Jumbotron />\n        <Container>\n          <Row>\n            <Col size=\"lg-2\"></Col>\n            <Col size=\"xs-2\">\n            <Wrapper>\n              {this.state.friends.map(friend => (\n                <FriendCard\n                  removeFriend={this.removeFriend}\n                  id={friend.id}\n                  key={friend.id}\n                  name={friend.name}\n                  image={friend.image}\n                  occupation={friend.occupation}\n                  location={friend.location}\n                />\n              ))}\n            </Wrapper>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}